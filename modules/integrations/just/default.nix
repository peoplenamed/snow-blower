{
  inputs,
  flake-parts-lib,
  ...
}: {
  imports = [
    inputs.flake-parts.flakeModules.flakeModules
    ./recipes/convco.nix
  ];
  flake.flakeModules.integrations = {
    options.perSystem = flake-parts-lib.mkPerSystemOption ({
      lib,
      pkgs,
      config,
      ...
    }: let
      inherit (lib) types mkOption;
      inherit (import ./utils.nix {inherit lib pkgs;}) featureType;
    in {
      imports = [
        {
          options.snow-blower.just.features = mkOption {
            type = types.submoduleWith {
              modules = [{freeformType = types.attrsOf featureType;}];
              specialArgs = {inherit pkgs;};
            };
            default = {};
            description = ''
              The recipes that are avaliable to just
            '';
          };
        }
      ];

      options.snow-blower.just = {
        package = mkOption {
          type = types.package;
          default = pkgs.just;
          defaultText = lib.literalExpression "pkgs.just";
          description = "The just package to use.";
        };

        commonFileName = mkOption {
          type = types.str;
          default = "just-flake.just";
          description = ''
            The name of the common justfile generated by this module.
          '';
        };
      };

      config.snow-blower = {
        packages = [
          config.snow-blower.just.package
        ];

        shell = {
          startup = let
            commonJustfile = pkgs.writeTextFile {
              name = "justfile";
              text =
                lib.concatStringsSep "\n"
                (lib.mapAttrsToList (_name: recipe: recipe.outputs.justfile) config.snow-blower.just.features);
            };
          in [
            ''
              ln -sf ${builtins.toString commonJustfile} ./${config.snow-blower.just.commonFileName}
            ''
          ];
        };
      };
    });
  };
}
